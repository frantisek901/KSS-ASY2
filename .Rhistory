dfv %>% table_as_tibble("Přátelé.BezDomova", "Prevalence") %>%
write_xlsx("tab2.xlsx")
# Uložení tabulky do Excelu v jedné 'pajplajně':
dfv %>% table_as_tibble("Přátelé.BezDomova", "Prevalence") %>%
write_xlsx("tab2.xlsx")
load("bezDomova2021.RData")
Lucie = select(dfb, Nízkopráh.Kde, Dluhy, Přehled, starts_with("Pracoval"),
ends_with(".Za80"), ends_with(".Výdrž"), Telefon.Sdělil)
write_xlsx(Lucie, "dataC.xlsx")
Vojta = select(dfb, Věk, Pije, Pije.Kolik, Prevalence, Partner, Přátelé.BezDomova, starts_with("Přátelé.Byd"),
starts_with("Kontakt."), Pohlaví, Doba)
write_xlsx(Vojta, "dataA.xlsx")
Lukáš = select(dfb, Pije, Pije.Kolik, Prevalence, Sebevnímání.Látky, ends_with(".Užívá"),
ends_with(".Nejčastěji"), starts_with("Pomoc."), -ends_with(".Výpis"), Nocování)
write_xlsx(Lukáš, "dataB.xlsx")
# Tibble tabulka pomocí vlastní funkce a 'pajplajny':
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije")
# Načtení vybraných proměnných:
dfl = read_xlsx("dataB.xlsx")
# Klasická tabulka:
table(dfl$Pije, dfl$Sebevnímání.Látky, useNA = "ifany")
# Tibble tabulka pomocí vlastní funkce a 'pajplajny':
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije")
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije") %>%
write_xlsx("tab3.xlsx")
View(Lukáš)
class(dfv)
tmp <- write_xlsx(list(mysheet = iris))
readxl::read_xlsx(tmp)
# Export tabulky do Excelu pomocí pajplajny a vlastní funkce:
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije") %>%
write_xlsx(list(pokus = .), "tab3.xlsx")
# Export tabulky do Excelu pomocí pajplajny a vlastní funkce:
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije") %>%
write_xlsx(x = list(pokus = .), path = "tab3.xlsx")
# Export tabulky do Excelu pomocí pajplajny a vlastní funkce:
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije") %>%
write_xlsx(x = list(pokus = .), path = "tab3.xlsx")
# Export tabulky do Excelu pomocí pajplajny a vlastní funkce:
tb = dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije")
write_xlsx(x = list(pokus = tb), path = "tab3.xlsx")
write_xlsx(x = list(pokus2 = tb), path = "tab3.xlsx")
write_xlsx(x = list("pokus2" = tb), path = "tab3.xlsx")
# Export tabulky do Excelu pomocí pajplajny a vlastní funkce:
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije") %>%
write_xlsx("tab3.xlsx")
length(dfv)
vsechny_tabulky = function(data) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
table_as_tibble(data, jména[i], jména[j])
}
}
}
vsechny_tabulky(dfv)
vsechny_tabulky = function(data) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
table_as_tibble(data, jména[i], jména[j]) %>% print()
}
}
}
vsechny_tabulky(dfv)
vsechny_tabulky = function(data, Excel = TRUE) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
table_as_tibble(data, jména[i], jména[j]) %>% print()
}
}
}
vsechny_tabulky(dfv)
View(vsechny_tabulky)
vsechny_tabulky = function(data, Excel = TRUE) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
k = 1000  # 'k' bude obsahovat pořadové číslo poslední tabulky, začneme číslovat od 1000.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
tb = table_as_tibble(data, jména[i], jména[j])
ifelse(Excel, write_xlsx(tb, paste0("tab", k, ".xlsx")), print(tb))
}
}
}
# Toto jen vypíše tabulky na obrazovku:
vsechny_tabulky(dfv, FALSE)
vsechny_tabulky = function(data, Excel = TRUE) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
k = 1000  # 'k' bude obsahovat pořadové číslo poslední tabulky, začneme číslovat od 1000.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
tb = table_as_tibble(data, jména[i], jména[j])  # Uložíme si tibble tabulku do objektu 'tb'
k = k + 1  # Posuneme pořadové číslo tabulky o 1.
ifelse(Excel,  # Podle toho, zda je v argumentu funkce uloženo TRUE, nebo FALSE...
write_xlsx(tb, paste0("tab", k, ".xlsx")),   #... buď uložíme tabulku do Excelu...
print(tb))  # ...nebo jí jen vytiskneme na obrazovku.
}
}
}
# Toto jen vypíše tabulky na obrazovku:
vsechny_tabulky(dfv, FALSE)
# Toto tabulky rovnou uloží do Excelu:
vsechny_tabulky(dfv, TRUE)
vsechny_tabulky = function(data, Excel = TRUE) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
k = 1000  # 'k' bude obsahovat pořadové číslo poslední tabulky, začneme číslovat od 1000.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
tb = table_as_tibble(data, jména[i], jména[j])  # Uložíme si tibble tabulku do objektu 'tb'
k = k + 1  # Posuneme pořadové číslo tabulky o 1.
# ifelse(Excel,  # Podle toho, zda je v argumentu funkce uloženo TRUE, nebo FALSE...
#        write_xlsx(tb, paste0("tab", k, ".xlsx")),   #... buď uložíme tabulku do Excelu...
#        print(tb))  # ...nebo jí jen vytiskneme na obrazovku.
print(paste( jména[i], "::", jména[j]))
}
}
}
# Toto jen vypíše tabulky na obrazovku:
vsechny_tabulky(dfv, FALSE)
#### Práce v kurzu KSS/ASY2
## Encoding: windows-1250
## Vytvořil: 2021-10-07 FrK
## Upravil:  2021-10-07 FrK
# Poznámky:
# =========
# 1) Cílem je vybrat z vyčištěných dat proměnné potřebné pro jednotlivé skupiny. DONE!
# 2) Vyřešit převedení tabulky na tibble a uložení do Excelu. DONE!
# 3) Příprava proměnných pro analýzu ... ještě jsme nezačali :-)
#
# ## Hlavička -------------------------------------------------------------
# Smazání paměti
rm(list=ls())
# Načtení packagí
library(dplyr)
library(tidyr)
library(tibble)
library(sjmisc)
library(stringr)
library(forcats)
library(ggplot2)
library(stargazer)
library(readxl)
library(writexl)
# source("D:/owncloud2/mujskript.R")  # Funguje pouze mně, studenty tím nebudeme trápit.
# Načtení dat
# load("bezDomova2021.RData")  # Také funguje pouze mně, studenty tím nebudu trápit.
# Vlastní funkce ----------------------------------------------------------
# Nejprve potřebujeme vlastní funkci na přejmenování, která začlení 'names()' do 'tidyverse'
prejmenuj = function(data, pos, newNames){
names(data)[pos] = newNames
data
}
# Funkce, která ze dvou proměnných udělá frekvenční tabulku třídění 2. stupně a
# výsledek vrátí jako tibble
table_as_tibble = function(data, var1, var2) {
# Jádro, vytvoření vlastní tabulky:
table(data[[var1]], data[[var2]], useNA = "ifany") %>%
# Převedení tabulky na data.frame, protože s tibble to není úplně jednoduché:
as.data.frame() %>%
# Tak a teď víme, že jedna proměnná je "Var1", druhá "Var2", máme i jejich původní jména
# v objektech 'var1' a 'var2' a konečně, víme, že hodnoty jsou ve "Freq".
# Můžeme to tedy celé v klidu reshapovat pomocí 'pivot_wider()'
pivot_wider(id_cols = Var1, names_from = Var2, values_from = Freq,
names_prefix = paste0(var2, "::")) %>%  # Zajistí, aby se před kategorie v názvu sloupečku napsal i název původní druhé proměnné.
# Nakonec první sloupeček tabulky přejmenujeme pomocí vlastní funkce 'prejmenuj()' tak,
# aby nesl název původní první proměnné:
prejmenuj(1, var1)
}
# Tým Lucie ---------------------------------------------------------------
# Dluhy --> Pracovní morálka
# Zakomentovaný kód nefunguje, protože by k němu byla třeba plná data a ta nedáme z ruky:
# Lucie = select(dfb, Nízkopráh.Kde, Dluhy, Přehled, starts_with("Pracoval"),
#                ends_with(".Za80"), ends_with(".Výdrž"), Telefon.Sdělil)
# write_xlsx(Lucie, "dataC.xlsx")
# Načtení vyselektovaných dat:
dfl = read_xlsx("dataC.xlsx")
# Klasická nehezká tabulka:
table(dfl$`Práce-Stavba.Výdrž`, dfl$Dluhy, useNA = "ifany")
# Pěknější tabulka vytvořená novou funkcí:
tb = table_as_tibble(data = dfl, var1 = "Práce-Stavba.Výdrž", var2 = "Dluhy")
tb
# Uložení tabulky do Excelu
write_xlsx(tb, "tab1.xlsx")
# Tým Vojta ---------------------------------------------------------------
# Sociální kapitál --> Alkohol
# Sociální kapitál = Počty přátel na ulici a v bydlení
# Alkohol = Kolik + Jak často
# Kontext: Doba, Věk, Partner
# Zakomentovaný kód nefunguje, protože by k němu byla třeba plná data a ta nedáme z ruky:
# Vojta = select(dfb, Věk, Pije, Pije.Kolik, Prevalence, Partner, Přátelé.BezDomova, starts_with("Přátelé.Byd"),
#                starts_with("Kontakt."), Pohlaví, Doba)
# write_xlsx(Vojta, "dataA.xlsx")
# Načtení vybraných proměnných:
dfv = read_xlsx("dataA.xlsx")
# Klasická nehezká tabulka:
table(dfv$Přátelé.BezDomova, dfv$Prevalence, useNA = "ifany")
# Pěknější tabulka jako 'pajplajna' s pomocí vlastní funkce:
dfv %>% table_as_tibble("Přátelé.BezDomova", "Prevalence")
# Uložení tabulky do Excelu v jedné 'pajplajně':
dfv %>% table_as_tibble("Přátelé.BezDomova", "Prevalence") %>%
write_xlsx("tab2.xlsx")
# Tým Lukáš ---------------------------------------------------------------
# Alkohol + Drogy --> Důvěra(?) a Kontakt(?)
# Sociální kapitál = Nocování + Kdo jim pomáhá
# Drogy = Co všechno bere
# Zakomentovaný kód nefunguje, protože by k němu byla třeba plná data a ta nedáme z ruky:
# Lukáš = select(dfb, Pije, Pije.Kolik, Prevalence, Sebevnímání.Látky, ends_with(".Užívá"),
#                ends_with(".Nejčastěji"), starts_with("Pomoc."), -ends_with(".Výpis"), Nocování)
# write_xlsx(Lukáš, "dataB.xlsx")
# Načtení vybraných proměnných:
dfl = read_xlsx("dataB.xlsx")
# Klasická tabulka:
table(dfl$Pije, dfl$Sebevnímání.Látky, useNA = "ifany")
# Tibble tabulka pomocí vlastní funkce a 'pajplajny':
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije")
# Export tabulky do Excelu pomocí pajplajny a vlastní funkce:
dfl %>% table_as_tibble("Sebevnímání.Látky", "Pije") %>%
write_xlsx("tab3.xlsx")
# Tabulky všech kombinací proměnných --------------------------------------
# Na nejmenším tibble 'dfv' si ukážeme, jak by bylo možné si vygenerovat
# do Excelu všechny dvojice proměnných. Každá dvojice bude mít svůj soubor, Bohu žel...
# zatím nedokážu vyřešit, jak uložit všechny tabulky na jednotlivé listy jednoho Excelovského sešitu.
# Resp. tuším jak by to šlo, ale je to buď složité, nebo je na to potřeba další package,
# nebo to bude nesrozumitelné...
# Napíšu si na to funkci. Stačí pak do funkce jen 'vložit' tibble a
# funkce udělá otrocky tabulku pro každou dvojici proměnných.
# BACHA! Nechte v tibble jen ty proměnné, které má smysl zkoumat tabulkou, např. ID případu dejte pryč.
# BACHA! Defaultně bude nastavený export do Excelu, ale lze nastavit jen vypsání na obrazovku,
# když zadáte 'Excel = FALSE', nebo jen dáte druhý argument 'FALSE'.
vsechny_tabulky = function(data, Excel = TRUE) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
k = 1000  # 'k' bude obsahovat pořadové číslo poslední tabulky, začneme číslovat od 1000.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
tb = table_as_tibble(data, jména[i], jména[j])  # Uložíme si tibble tabulku do objektu 'tb'
k = k + 1  # Posuneme pořadové číslo tabulky o 1.
# ifelse(Excel,  # Podle toho, zda je v argumentu funkce uloženo TRUE, nebo FALSE...
#        write_xlsx(tb, paste0("tab", k, ".xlsx")),   #... buď uložíme tabulku do Excelu...
#        print(tb))  # ...nebo jí jen vytiskneme na obrazovku.
print(paste( jména[i], "::", jména[j]))
}
}
}
# Toto jen vypíše tabulky na obrazovku:
vsechny_tabulky(dfv, FALSE)
# Toto tabulky rovnou uloží do Excelu:
vsechny_tabulky(dfv, TRUE)
# Všech 91 tabulek se uložilo jako jednotlivé soubory.
# Nyní si to mohou vyzkoušet i další skupiny, ale BACHA!
# U týmu Lucie to bude dělat 14 * 27 = 378 souborů.
# U týmu Lukáš to bude neuvěřitelných 91 * 46 = 4186 souborů.
# Připravte si na to hard disky :-D
# A nebo pracujte na menších částech souborů, kde má smysl vše se vším srovnat...
vsechny_tabulky = function(data, Excel = TRUE) {
pp = length(data)  # Do 'pp' si uložíme počet proměnných.
jména = names(data)  # Do 'jména' si uložíme všechna jména proměnných.
k = 1000  # 'k' bude obsahovat pořadové číslo poslední tabulky, začneme číslovat od 1000.
# Budeme využívat toho, že do funkce 'table_as_tibble()' zadáváme název proměnné jako string!
# Vše vyřešíme dvěma cykly:
for (i in 1:(pp - 1)) {  # První projede proměnnými od první po předposlední.
for (j in (i+1):pp) {  # Druhý projede uvnitř od 'í' plus první po poslední.
tb = table_as_tibble(data, jména[i], jména[j])  # Uložíme si tibble tabulku do objektu 'tb'
k = k + 1  # Posuneme pořadové číslo tabulky o 1.
ifelse(Excel,  # Podle toho, zda je v argumentu funkce uloženo TRUE, nebo FALSE...
write_xlsx(tb, paste0("tab", k, ".xlsx")),   #... buď uložíme tabulku do Excelu...
print(tb))  # ...nebo jí jen vytiskneme na obrazovku.
}
}
}
# Toto jen vypíše tabulky na obrazovku:
vsechny_tabulky(dfv, FALSE)
# Toto tabulky rovnou uloží do Excelu:
vsechny_tabulky(dfv, TRUE)
# Načtení packagí
library(dplyr)
library(tidyr)
library(tibble)
library(sjmisc)
library(stringr)
library(forcats)
library(ggplot2)
library(stargazer)
library(readxl)
library(writexl)
# Načtení packagí
library(dplyr)
library(tidyr)
library(tibble)
library(sjmisc)
library(stringr)
library(forcats)
library(ggplot2)
library(stargazer)
library(readxl)
library(writexl)
# Nejprve potřebujeme vlastní funkci na přejmenování, která začlení 'names()' do 'tidyverse'
prejmenuj = function(data, pos, newNames){
names(data)[pos] = newNames
data
}
# Funkce, která ze dvou proměnných udělá frekvenční tabulku třídění 2. stupně a
# výsledek vrátí jako tibble
table_as_tibble = function(data, var1, var2) {
# Jádro, vytvoření vlastní tabulky:
table(data[[var1]], data[[var2]], useNA = "ifany") %>%
# Převedení tabulky na data.frame, protože s tibble to není úplně jednoduché:
as.data.frame() %>%
# Tak a teď víme, že jedna proměnná je "Var1", druhá "Var2", máme i jejich původní jména
# v objektech 'var1' a 'var2' a konečně, víme, že hodnoty jsou ve "Freq".
# Můžeme to tedy celé v klidu reshapovat pomocí 'pivot_wider()'
pivot_wider(id_cols = Var1, names_from = Var2, values_from = Freq,
names_prefix = paste0(var2, "::")) %>%  # Zajistí, aby se před kategorie v názvu sloupečku napsal i název původní druhé proměnné.
# Nakonec první sloupeček tabulky přejmenujeme pomocí vlastní funkce 'prejmenuj()' tak,
# aby nesl název původní první proměnné:
prejmenuj(1, var1)
}
View(dfl)
load("bezDomova2021.RData")
View(dfb)
View(dfb)
select(dfb, starts_with("Vyhaz"))
select(dfb, starts_with("Vyhaz"))
# Zakomentovaný kód nefunguje, protože by k němu byla třeba plná data a ta nedáme z ruky:
Lucie = select(dfb, Nízkopráh.Kde, Dluhy, Přehled, starts_with("Pracoval", starts_with("Vyhaz"),
ends_with(".Za80"), ends_with(".Výdrž"), Telefon.Sdělil))
# Zakomentovaný kód nefunguje, protože by k němu byla třeba plná data a ta nedáme z ruky:
Lucie = select(dfb, Nízkopráh.Kde, Dluhy, Přehled, starts_with("Pracoval", starts_with("Vyhaz"),
ends_with(".Za80"), ends_with(".Výdrž"), Telefon.Sdělil))
# Zakomentovaný kód nefunguje, protože by k němu byla třeba plná data a ta nedáme z ruky:
Lucie = select(dfb, Nízkopráh.Kde, Dluhy, Přehled, starts_with("Pracoval"), starts_with("Vyhaz"),
ends_with(".Za80"), ends_with(".Výdrž"), Telefon.Sdělil)
write_xlsx(Lucie, "dataC.xlsx")
View(dfv)
View(dfb)
select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí)
# Načtení packagí
library(dplyr)
library(tidyr)
library(tibble)
library(sjmisc)
library(stringr)
library(forcats)
library(ggplot2)
library(stargazer)
library(readxl)
library(writexl)
select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí)
frq(dfb$Přátelé.BezDomova)
frq(dfb$Přátelé.Bydlí)
frq(dfb$Kontakt.Nikdo)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(Samotář = if_else(Kontakt.Nikdo == "Ano" & Přátelé.BezDomova == "0" & Přátelé.Bydlí == "0", "Ano", "Ne"))
frq(dfx$Samotář)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(Samotář = if_else(Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"))
frq(dfx$Samotář)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(Samotář = if_else(Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"))
frq(dfx$Samotář)
frq(dfx$Přátelé.BezDomova)
frq(dfx$Přátelé.Bydlí)
frq(dfx$Kontakt.Nikdo)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(Samotář = if_else(Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"))
frq(dfx$Samotář)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(Samotář = if_else(
Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"))
frq(dfx$Samotář)
frq(dfx$Přátelé.BezDomova)
frq(dfx$Přátelé.Bydlí)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0", "Ano", "Ne")
)
table(dfx$Bez, dfx$Byd)
# Funkce, která ze dvou proměnných udělá frekvenční tabulku třídění 2. stupně a
# výsledek vrátí jako tibble
table_as_tibble = function(data, var1, var2) {
# Jádro, vytvoření vlastní tabulky:
table(data[[var1]], data[[var2]], useNA = "ifany") %>%
# Převedení tabulky na data.frame, protože s tibble to není úplně jednoduché:
as.data.frame() %>%
# Tak a teď víme, že jedna proměnná je "Var1", druhá "Var2", máme i jejich původní jména
# v objektech 'var1' a 'var2' a konečně, víme, že hodnoty jsou ve "Freq".
# Můžeme to tedy celé v klidu reshapovat pomocí 'pivot_wider()'
pivot_wider(id_cols = Var1, names_from = Var2, values_from = Freq,
names_prefix = paste0(var2, "::")) %>%  # Zajistí, aby se před kategorie v názvu sloupečku napsal i název původní druhé proměnné.
# Nakonec první sloupeček tabulky přejmenujeme pomocí vlastní funkce 'prejmenuj()' tak,
# aby nesl název původní první proměnné:
prejmenuj(1, var1)
}
table_as_tibble(dfx, Bez, Byd)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0", "Ano", "Ne")
)
table_as_tibble(dfx, Bez, Byd)
table_as_tibble(dfx, "Bez", "Byd")
frq(dfx$Přátelé.Bydlí)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
# Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0", "Ano", "Ne")
)
frq(dfx$Samotář)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0", "Ano", "Ne")
)
table_as_tibble(dfx, "Bez", "Byd")
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
# Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0", "Ano", "Ne")
)
frq(dfx$Samotář)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
# Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova %in% c("0", "1-2"), "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí %in% c("0", "1-2"), "Ano", "Ne")
)
frq(dfx$Samotář)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
# Kontakt.Nikdo == "Ano" &
Přátelé.BezDomova == "0" &
Přátelé.Bydlí == "0", "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0" | Přátelé.BezDomova == "1-2", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0" | Přátelé.Bydlí == "1-2", "Ano", "Ne")
)
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí) %>%
mutate(
Samotář = if_else(
# Kontakt.Nikdo == "Ano" &
(Přátelé.BezDomova == "0" | Přátelé.BezDomova == "1-2") &
(Přátelé.Bydlí == "0" | Přátelé.Bydlí == "1-2"), "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0" | Přátelé.BezDomova == "1-2", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0" | Přátelé.Bydlí == "1-2", "Ano", "Ne")
)
frq(dfx$Samotář)
frq(dfx$Přátelé.BezDomova)
frq(dfx$Přátelé.Bydlí)
frq(dfx$Kontakt.Nikdo)
table_as_tibble(dfx, "Bez", "Byd")
dfx = select(dfb, Kontakt.Nikdo, Přátelé.BezDomova, Přátelé.Bydlí, Partner) %>%
mutate(
Samotář = if_else(
# Kontakt.Nikdo == "Ano" &
(Přátelé.BezDomova == "0" | Přátelé.BezDomova == "1-2") &
(Přátelé.Bydlí == "0" | Přátelé.Bydlí == "1-2"), "Ano", "Ne"),
Bez = if_else(Přátelé.BezDomova == "0" | Přátelé.BezDomova == "1-2", "Ano", "Ne"),
Byd = if_else(Přátelé.Bydlí == "0" | Přátelé.Bydlí == "1-2", "Ano", "Ne")
)
table_as_tibble(dfx, "Kontakt.Nikdo", "Partner")
